import os
from aiogram import   F, Router
from aiogram.filters import CommandStart , Command
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.types import FSInputFile
from web.models import Report
from asgiref.sync import sync_to_async
from app.midelware import CreateReport, GetTgId
from aiogram.fsm.context import FSMContext
from bot.config import bot, dp
import asyncio
from pathlib import Path
from app.api import creat_category
import string
from bot.app.database.models import User , Oper, Admin
from bot.app.database.request import (
    is_admin, add_oper_req, get_opers, is_oper, 
    add_admin, get_tip_req, get_user, add_tip_req,
    check_user
)
from aiogram.types import InputFile


BASE_DIR = Path(__file__).resolve().parent.parent.parent
router = Router()

#                       –°–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
# 1 —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
@router.callback_query(F.data == 'create_report')
async def create_report(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CreateReport.title)
    sent_msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∞–ª–æ–±—ã:")
    await state.update_data(bot_message_id=sent_msg.message_id)

    await callback.answer()

# 2 —à–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–∞–ª–æ–≤–∫–∞
@router.message(CreateReport.title)
async def get_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.delete()  # üí• —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(CreateReport.text)
    data = await state.get_data()

    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data['bot_message_id'],  # –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        text="–û–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
    )   

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@router.message(CreateReport.text)
async def get_title(message: Message , state: FSMContext):
    await state.update_data(text=message.text)
    await message.delete()
    await state.set_state(CreateReport.image)
    data = await state.get_data()
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data['bot_message_id'],  # –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–æ–∂–µ–Ω–∏—è –∂–∞–ª–æ–±—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=kb.skip
    )   

# –æ–±—Ä–∞–±–æ—Ç–∞–∫ —Ñ–æ—Ç–∫–∏ (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
@router.callback_query(CreateReport.image, F.data == "skip")
async def skip_image(callback: CallbackQuery, state: FSMContext):
    await state.update_data(image=None)
    await state.set_state(CreateReport.location)
    data = await state.get_data()
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=data['bot_message_id'],
        text="üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è.", 
    )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–∫–∏
@router.message(CreateReport.image, F.photo)
async def get_image(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    images_dir = BASE_DIR / "media" / "images"
    images_dir.mkdir(parents=True, exist_ok=True)
    saved_path = images_dir / f"{photo.file_unique_id}.jpg"
    await bot.download_file(file_info.file_path, saved_path)
    relative_path = saved_path.relative_to(BASE_DIR / "media")
    data = await state.get_data()
    await state.update_data(image=str(relative_path))
    await message.delete()
    await state.set_state(CreateReport.location)
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data['bot_message_id'],
        text="üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è.",
    )






# –°–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Report –∏–∑ Django ORM
@router.message(CreateReport.location, F.location)
async def get_location(message: Message , state: FSMContext):
    data = await state.get_data()
    if data.get("image") and os.path.exists(data["image"]):
        category = await asyncio.to_thread(
        creat_category, data["image"], data["text"], data["title"]
    )
    else:
        category = await asyncio.to_thread(
        creat_category, None, data["text"], data["title"]
    )
    report = await sync_to_async(Report.objects.create)(
        category = category.replace('*',''),
        title = data['title'],
        text = data['text'],
        image = data.get('image'),
        latitude=message.location.latitude,
        longitude=message.location.longitude,
        is_decided=False
    )
    await message.delete()
    await state.clear() 
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data['bot_message_id'],
        text="‚úÖ –ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥ üíô",
        reply_markup=kb.main
    )
    opers = await get_opers()
    try:
        photo_path = BASE_DIR / "media" / data["image"]
    except TypeError:
        pass
    # photo = FSInputFile(photo_path)
    for oper in opers:
        if report.category == 'CRITICAL':
            try:
                photo = FSInputFile(photo_path)
                await bot.send_photo(
                int(oper.tg_id),
                photo=photo,
                caption=f"""
    ‚ö†Ô∏è –ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è *–≤–∞–∂–Ω–∞—è –∂–∞–ª–æ–±–∞*.

    üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {report.title}

    üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {report.text[:200]}{'...' if len(report.text) > 200 else ''}

    üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** https://2gis.kz/geo/{report.latitude},{report.longitude}

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∂–∞–ª–æ–±–æ–π –∏ –ø—Ä–∏–º–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ä—ã.
    """,
            parse_mode="Markdown"
        )
            except Exception as e:
                pass
            await bot.send_message(int(oper.tg_id), text=f"""
    ‚ö†Ô∏è –ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è *–≤–∞–∂–Ω–∞—è –∂–∞–ª–æ–±–∞*.

    üìù **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {report.title}

    üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {report.text[:200]}{'...' if len(report.text) > 200 else ''}

    üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** https://2gis.kz/geo/{report.latitude},{report.longitude}

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∂–∞–ª–æ–±–æ–π –∏ –ø—Ä–∏–º–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ä—ã.
    """,
            parse_mode="Markdown"
        )
                             

        

