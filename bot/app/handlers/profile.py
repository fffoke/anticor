import os
from aiogram import   F, Router
from aiogram.filters import CommandStart , Command
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.types import FSInputFile
from web.models import Report
from asgiref.sync import sync_to_async
from app.midelware import Verify
from aiogram.fsm.context import FSMContext
from bot.config import bot, dp
import asyncio
from pathlib import Path
from app.api import creat_category
import string
from bot.app.database.models import User , Oper, Admin
from bot.app.database.request import (
    is_admin, add_oper_req, get_opers, is_oper, 
    add_admin, get_tip_req, get_user, add_tip_req,
    check_user, create_user
)
from aiogram.types import InputFile

router = Router()


@router.callback_query(F.data == 'my_profile')
async def my_profile(callback: CallbackQuery):
    tg_id = callback.message.from_user.id
    user = await get_user(tg_id=tg_id)
    if user:
        text = (
            f"ü™™ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üë§ –ò–º—è: {user.name}\n"
            f"üÜî –ò–ò–ù: {user.iin}\n"
            f"üí¨ Telegram ID: {user.tg_id}\n\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            )
        await callback.message.edit_text(text=text, reply_markup= kb.main, parse_mode='HTML')
        return
    else:
        text = (
            "‚ùå <b>–í—ã –µ—â–µ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
            "–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n"
            "–ü–æ–ª—è:\n- –ò–º—è\n- –ò–ò–ù"
        )
        await callback.message.edit_text(text=text, reply_markup= kb.verify, parse_mode='HTML')
        return


@router.callback_query(F.data == 'verify')
async def verify(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Verify.iin)
    sent_msg = await callback.message.edit_text(
        text= '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ò–ù'
    )
    await state.update_data(bot_message_id=sent_msg.message_id)
    await callback.answer()


@router.message(Verify.iin)
async def get_iin(message: Message, state: FSMContext):
    iin = message.text.strip()

    if not iin.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π –ò–ò–ù!", reply_markup=kb.verify)
        return
    
    if len(str(iin)) == 12:
        await state.update_data(iin=iin)
        await state.set_state(Verify.name)
        data = await state.get_data()
        await message.delete()
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=data['bot_message_id'],  # –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è: ",
        )   
    else:
        print(len(str(iin)))
        await message.answer(text='‚ö†Ô∏è –ò–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä!', reply_markup= kb.verify)
        return

@router.message(Verify.name)
async def reg_user(message: Message, state: FSMContext):
    data = await state.get_data()
    iin = data['iin']
    tg_id = message.from_user.id
    name = message.text
    user = await create_user(tg_id=tg_id, name=name, iin=iin)
    await message.delete()
    await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=data['bot_message_id'],  
            text="–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–µ—Ü–∏—Ä–æ–≤–∞–ª–∏—Å—å!",
            reply_markup=kb.verify
        )
